#include "services_refactored_pdune.fcl"
#include "caldata_dune.fcl"
#include "wirecell_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "cluster_dune.fcl"
#include "t0reco.fcl"
#include "mcreco.fcl"
#include "detsimmodules_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "protodune_tools_dune.fcl"


process_name: pdunesupera
# 
services:
{
    # Load the service that manages root files for histograms.
    TFileService:           { fileName: "protodune_reco_hists.root" }
    TimeTracker:            @local::dune_time_tracker
    MemoryTracker:          @local::dune_memory_tracker
    RandomNumberGenerator:  {} #ART native random number generator
    message:                @local::dune_message_services_prod
    FileCatalogMetadata:    @local::art_file_catalog_mc
    #@table::protodune_simulation_services
    @table::protodune_reco_services
    # ChannelStatusService: @local::pdsp_channel_status
    Geometry:                 @local::protodunev7_ddg_geo
    IFDH: {}
}

# BackTracker Module labels
services.BackTrackerService.BackTracker.G4ModuleLabel: "largeant"
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
services.DetectorPropertiesService:    @local::protodunesp_detproperties
services.DetectorPropertiesService.GetHVDriftfromSamweb:           false
services.DetectorPropertiesService.GetReadOutWindowSizefromSamweb: false
services.DetectorPropertiesService.UseRunDependentTemperature:     false
services.RawDigitPrepService.ToolNames: @local::pdsim_dataprep_tools_wirecell

#source is now a root file
source:
{
    module_type: RootInput
    maxEvents: -1
    #saveMemoryObjectThreshold: 10485760
    fileNames: ["protodune_reco_output.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: 
{
    producers:
    {
        rns:      { module_type: "RandomNumberSaver" }
    }

    analyzers:
    {

        supera: 
        {
            module_type:     "LArSoftSuperaDriver"
            supera_params:   "supera_pdune_basic.fcl"
            out_filename:    "larcv.root"
            unique_filename: true 
            stream:          "mc"
            Verbosity: 0
        }
    }
    simulate: [ rns ]
    analyze:  [ supera ]
    #define the output stream, there could be more than one if using filters
    stream:   [ ]

    #trigger_paths is a keyword and contains the paths that modify the art::event,
    #ie filters and producers
    trigger_paths: [ simulate ]

    #end_paths is a keyword and contains the paths that do not modify the art::Event,
    #ie analyzers and output streams.  these all run simultaneously
    end_paths:     [ analyze ]
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
    out1:
    {
        module_type: RootOutput
        fileName:    "%ifb_%p.root"
        dataTier:    "supera"
        compressionLevel: 1
        # skim output (if needed)
        outputCommands: [ "drop *",  "keep *_mcreco_*_*", "keep recob::Hit*_gaushit_*_*" ]
    }
}

services.message.destinations :
{
  STDCOUT:
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "INFO"      #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
       default:
       {
         limit:       1000  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}