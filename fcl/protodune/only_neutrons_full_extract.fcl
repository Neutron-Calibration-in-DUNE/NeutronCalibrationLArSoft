#include "services_refactored_pdune.fcl"
#include "singles_dune.fcl"
#include "textfilegen.fcl"
#include "corsika_protodune.fcl"
#include "dune_radiological_model.fcl"
#include "geometry_dune.fcl"

#include "LArG4_dune.fcl"
#include "IonAndScint_dune.fcl"
#include "PDFastSim_dune.fcl"

#include "services_refactored_pdune.fcl"
#include "wirecell_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "CRT.fcl"
#include "tools_dune.fcl"

#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "mcreco.fcl"
#include "detsimmodules_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "protodune_tools_dune.fcl"

process_name: pdunefullsim

services:
{
    # Load the service that manages root files for histograms.
    TFileService:             { fileName: "hists/protodune_generator_hists.root" }
    TimeTracker:              @local::dune_time_tracker
    MemoryTracker:            @local::dune_memory_tracker
    RandomNumberGenerator:    {} #ART native random number generator
    FileCatalogMetadata:      @local::art_file_catalog_mc
    @table::protodune_larg4_services
    @table::protodune_refactored_simulation_services 
    @table::protodune_reco_services
    Geometry:                 @local::protodunev7_ddg_geo
    IFDH: {}
    
    PhysicsList:
    {
        PhysicsListName:                    "MyQGSP_BERT_ArHP"
        DumpList:                           true
        enableNeutronLimit:                 false
        NeutronTimeLimit:                   0.0
        NeutronKinELimit:                   0.0
        enableStepLimit:                    true
        enableOptical:                      false
        enableCerenkov:                     false
        CerenkovStackPhotons:               false
        CerenkovMaxNumPhotons:              100
        CerenkovMaxBetaChange:              10.0
        enableScintillation:                false
        ScintillationStackPhotons:          false
        ScintillationByParticleType:        false
        ScintillationTrackInfo:             false
        ScintillationTrackSecondariesFirst: false
        enableAbsorption:                   false
        enableRayleigh:                     false
        enableMieHG:                        false
        enableBoundary:                     false
        enableWLS:                          false
        BoundaryInvokeSD:                   false
        Verbosity:                          1
        WLSProfile:                         delta
    }
}

# BackTracker Module labels
services.BackTrackerService.BackTracker.G4ModuleLabel: "largeant"
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
services.DetectorPropertiesService:    @local::protodunesp_detproperties
services.DetectorPropertiesService.GetHVDriftfromSamweb:           false
services.DetectorPropertiesService.GetReadOutWindowSizefromSamweb: false
services.DetectorPropertiesService.UseRunDependentTemperature:     false
services.RawDigitPrepService.ToolNames: @local::pdsim_dataprep_tools_wirecell

#Start each new event with an empty event.
source:
{
    module_type: EmptyEvent
    timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
    maxEvents:   2
    firstRun:    1           # Run number to use for this file
    firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
    filters: 
    {
        trigfilter:  @local::pdsp_trigfilter_all
        nhitsfilter: @local::standard_numberofhitsfilter
    }
    producers:
    {
        generator:      @local::standard_textfilegen
        largeant:       @local::protodune_larg4
        IonAndScint:    @local::protodune_ionandscint
        PDFastSim:      @local::protodune_pdfastsim_pvs
        tpcrawdecoder:  @local::wirecell_protodunespmc
        opdigi:         @local::protodune_opdigi_refactor
        crt:            @local::CRTSimRefac_standard
        caldata:        @local::producer_adcprep_notool          
        wclsdatasp:     @local::protodunespdata_wctsp
        gaushit:        @local::protodunespmc_gaushitfinder
        reco3d:         @local::protodunespmc_spacepointsolver
        rns:        { module_type: "RandomNumberSaver" }
    }
    
    #define the producer and filter modules for this path, order matters, 
    #filters reject all following items.  see lines starting physics.producers below
    simulate: 
    [
        generator, 
        largeant, IonAndScint, PDFastSim,
        tpcrawdecoder, opdigi, crt,
        caldata, wclsdatasp, gaushit, nhitsfilter, reco3d,
        rns
    ]
 
    #define the output stream, there could be more than one if using filters 
    stream1:  [ out1 ]

    #trigger_paths is a keyword and contains the paths that modify the art::event, 
    #ie filters and producers
    trigger_paths: [simulate] 

    #end_paths is a keyword and contains the paths that do not modify the art::Event, 
    #ie analyzers and output streams.  these all run simultaneously
    end_paths:     [stream1]  
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
    out1:
    {
        module_type:        RootOutput
        fileName:           "outputs/only_neutrons_fullsim_output.root"
        dataTier:           "generated"
        compressionLevel:   1
        outputCommands:     [ "keep *" ]
    }
}

physics.producers.generator.InputFileName:  "../../inputs/protodune/protodune_100_1450_0.dat"
physics.producers.generator.maxEvents:      2

physics.producers.largeant.ChargeRecoveryMargin: 2.5 # cm
services.LArG4Parameters.UseCustomPhysics:      true
services.LArG4Parameters.EnabledPhysics: [ "LowEnergyEm",
                                           "FastOptical",
                                           "SynchrotronAndGN",
                                           "Ion",
                                           "HadronHP",
                                           "Decay",
                                           "HadronElastic",
                                           "Stopping" ]
services.LArG4Parameters.ModifyProtonCut:   true
services.LArG4Parameters.NewProtonCut:      0.0
# we want to keep all ionization electrons
services.LArG4Parameters.FillSimEnergyDeposits:     true
services.LArG4Parameters.KeepEMShowerDaughters:     true
# let's try setting this to zero to see what happens.
services.LArG4Parameters.ParticleKineticEnergyCut:  0.0 # GeV
services.LArG4Parameters.StoreTrajectories:         true
services.LArG4Parameters.VisualizeNeutrals:         true
#services.LArG4Parameters.VisualizationEnergyCut:    1e-9 # GeV

physics.producers.caldata.DigitLabel:                       "tpcrawdecoder:daq" 
physics.producers.caldata.WireName:                         "dataprep" 
physics.producers.gaushit.CalDataModuleLabel:               "wclsdatasp:gauss"

# Use channel map service for data
services.PdspChannelMapService:                             @local::pdspchannelmap