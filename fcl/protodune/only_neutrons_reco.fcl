## same as protoDUNE_refactored_reco_stage1.fcl, no sce; no lifetime correction; no yz, x, t correction; *calinoxyzt<->*cali; *calipidnoxyzt<->*calipid
## this fcl is currently kept; we use two stage recos once we have calibration done: protoDUNE_refactored_reco_stage1.fcl and protoDUNE_refactored_reco_stage2.fcl

##include "services_dune.fcl"
#include "services_refactored_pdune.fcl"
#include "caldata_dune.fcl"
#include "wirecell_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "cluster_dune.fcl"
#include "t0reco.fcl"
#include "mcreco.fcl"
##include "mpvmpr_pdune.fcl"
#include "detsimmodules_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "protodune_tools_dune.fcl"

process_name: pdunereco

services:
{
    # Load the service that manages root files for histograms.
    TFileService:           { fileName: "hists/only_neutrons_reco_hists.root" }
    TimeTracker:            @local::dune_time_tracker
    MemoryTracker:          @local::dune_memory_tracker
    RandomNumberGenerator:  {} #ART native random number generator
    message:                @local::dune_message_services_prod
    FileCatalogMetadata:    @local::art_file_catalog_mc
                            @table::protodune_reco_services
    # ChannelStatusService: @local::pdsp_channel_status
    Geometry:               @local::protodunev7_ddg_geo
    IFDH: {}
}

# BackTracker Module labels
services.BackTrackerService.BackTracker.G4ModuleLabel: "largeant"
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
services.DetectorPropertiesService:    @local::protodunesp_detproperties
services.DetectorPropertiesService.GetHVDriftfromSamweb:           false
services.DetectorPropertiesService.GetReadOutWindowSizefromSamweb: false
services.DetectorPropertiesService.UseRunDependentTemperature:     false
services.RawDigitPrepService.ToolNames: @local::pdsim_dataprep_tools_wirecell

#source is now a root file
source:
{
    module_type: RootInput
    maxEvents: -1
    #saveMemoryObjectThreshold: 10485760
    fileNames: ["outputs/only_neutrons_detsim_output.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: 
{
    filters: 
    {
        trigfilter:  @local::pdsp_trigfilter_all
        nhitsfilter: @local::standard_numberofhitsfilter
    }

    producers: 
    {
        caldata:            @local::producer_adcprep_notool          
        wclsdatasp:         @local::protodunespdata_wctsp
        gaushit:            @local::protodunespmc_gaushitfinder
        reco3d:             @local::protodunespmc_spacepointsolver
    }
    #define the producer and filter modules for this path, order matters,
    #filters reject all following items.  see lines starting physics.producers below
    reco: [ caldata, wclsdatasp, gaushit, nhitsfilter, reco3d ]

    #define the output stream, there could be more than one if using filters
    stream1:  [ out1 ]

    #trigger_paths is a keyword and contains the paths that modify the art::event,
    #ie filters and producers
    trigger_paths: [ reco ]

    #end_paths is a keyword and contains the paths that do not modify the art::Event,
    #ie analyzers and output streams.  these all run simultaneously
    end_paths:     [ stream1 ]
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
    out1:
    {
        module_type: RootOutput
        fileName:    "outputs/only_neutrons_reco_output.root"
        dataTier:    "full-reconstructed"
        outputCommands: [ "keep *" ]
        compressionLevel: 1
        fastCloning: true
    }
}

physics.producers.caldata.DigitLabel:                       "tpcrawdecoder:daq" 
physics.producers.caldata.WireName:                         "dataprep" 
physics.producers.gaushit.CalDataModuleLabel:               "wclsdatasp:gauss"

# Use channel map service for data
services.PdspChannelMapService:                             @local::pdspchannelmap